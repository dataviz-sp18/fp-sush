inner_join(nrc_joy) %>%
count(tokens, sort = TRUE, by('token' = 'word'))
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(sender == "Shubha")
unnest_tokens(word, tokens) %>%
dplyr::count(word(), sort = TRUE) %>%
filter(!word %in% stop_words$word) %>%
ungroup()
test1 <- tokens %>%
inner_join(nrc_joy) %>%
count(tokens, sort = TRUE, by('tokens' = 'word'))
tokens
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(sender == "Shubha")
unnest_tokens(word, tokens) %>%
dplyr::count(word(), sort = TRUE) %>%
filter(!word %in% stop_words$word) %>%
ungroup()
test1 <- tokens %>%
rename('tokens' = 'word')
inner_join(nrc_joy) %>%
count(tokens, sort = TRUE)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(sender == "Shubha")
unnest_tokens(word, tokens) %>%
dplyr::count(word(), sort = TRUE) %>%
filter(!word %in% stop_words$word) %>%
ungroup()
test1 <- tokens %>%
rename('tokens' = 'word') %>%
inner_join(nrc_joy) %>%
count(tokens, sort = TRUE)
test1
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(sender == "Shubha")
unnest_tokens(word, tokens) %>%
dplyr::count(word(), sort = TRUE) %>%
filter(!word %in% stop_words$word) %>%
filter(word %in% nrc_joy$word)
ungroup()
nrc_joy
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(sender == "Shubha")
unnest_tokens(word, tokens) %>%
dplyr::count(word(), sort = TRUE) %>%
filter(!word %in% stop_words$word) %>%
filter(word %in% nrc_joy$word)  %>%
ungroup()
df
library(dplyr)
library(wordcloud)
library(RColorBrewer)
library(stringr)
library(shiny)
library(tidytext)
getwd()
df <- read.csv(file = 'latest_6pm.csv', stringsAsFactors = FALSE) %>%
select(c('name', 'tokens','start','end'))
senders <- df$name
data("stop_words")
pal <- brewer.pal(8,"Dark2")
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(sender == "Shubha")
unnest_tokens(word, tokens) %>%
dplyr::count(word(), sort = TRUE) %>%
filter(!word %in% stop_words$word) %>%
filter(word %in% nrc_joy$word)  %>%
ungroup()
View(df)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == "Shubha")
unnest_tokens(word, tokens) %>%
dplyr::count(word(), sort = TRUE) %>%
filter(!word %in% stop_words$word) %>%
filter(word %in% nrc_joy$word)  %>%
ungroup()
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == "Shubha")
unnest_tokens(word, tokens) %>%
dplyr::count(word(), sort = TRUE) %>%
filter(!word %in% stop_words$word) %>%
filter(word %in% nrc_joy$word) # %>%
#ungroup()
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == "Shubha")
unnest_tokens(word, tokens) %>%
dplyr::count(word(), sort = TRUE) #%>%
#filter(!word %in% stop_words$word) #%>%
#filter(word %in% nrc_joy$word) # %>%
#ungroup()
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == "Shubha")
unnest_tokens(word, tokens) %>%
dplyr::count(word(), sort = TRUE) %>%
filter(!word %in% stop_words$word) #%>%
#filter(word %in% nrc_joy$word) # %>%
#ungroup()
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == "Shubha")
unnest_tokens(word, tokens) %>%
dplyr::count(word(), sort = TRUE) %>%
filter(!word %in% stop_words$word) %>%
filter(word %in% nrc_joy$word) # %>%
#ungroup()
tokens
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == "Shubha")
unnest_tokens(word, tokens)
#  dplyr::count(word(), sort = TRUE) %>%
#  filter(!word %in% stop_words$word) %>%
#  filter(word %in% nrc_joy$word) # %>%
#  #ungroup()
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == "Shubha")
unnest_tokens(word, tokens)
#  dplyr::count(word(), sort = TRUE) %>%
#  filter(!word %in% stop_words$word) %>%
#  filter(word %in% nrc_joy$word) # %>%
#  #ungroup()
tokens
library(dplyr)
library(wordcloud)
library(RColorBrewer)
library(stringr)
library(shiny)
library(tidytext)
getwd()
df <- read.csv(file = 'latest_6pm.csv', stringsAsFactors = FALSE) %>%
select(c('name', 'tokens','start','end'))
senders <- df$name
data("stop_words")
pal <- brewer.pal(8,"Dark2")
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == " Shubha")
unnest_tokens(word, tokens)
#  dplyr::count(word(), sort = TRUE) %>%
#  filter(!word %in% stop_words$word) %>%
#  filter(word %in% nrc_joy$word) # %>%
#  #ungroup()
tokens
View(tokens)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == " Shubha")
unnest_tokens(tokens, tokens)
#  dplyr::count(word(), sort = TRUE) %>%
#  filter(!word %in% stop_words$word) %>%
#  filter(word %in% nrc_joy$word) # %>%
#  #ungroup()
tokens
View(tokens)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == " Shubha") %>%
unnest_tokens(tokens, tokens)
#  dplyr::count(word(), sort = TRUE) %>%
#  filter(!word %in% stop_words$word) %>%
#  filter(word %in% nrc_joy$word) # %>%
#  #ungroup()
tokens
View(tokens)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == " Shubha") %>%
unnest_tokens(tokens, tokens)
dplyr::count(word(), sort = TRUE) #%>%
#  filter(!tokens %in% stop_words$word) %>%
#  filter(tokens %in% nrc_joy$word) # %>%
#  #ungroup()
tokens
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == " Shubha") %>%
unnest_tokens(tokens, tokens)
dplyr::count(word(), sort = TRUE) %>%
filter(!tokens %in% stop_words$word) #%>%
#  filter(tokens %in% nrc_joy$word) # %>%
#  #ungroup()
tokens
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == " Shubha") %>%
unnest_tokens(tokens, tokens)
dplyr::count(word(), sort = TRUE) %>%
filter(!tokens %in% stop_words$word) %>%
filter(tokens %in% nrc_joy$word) # %>%
#  #ungroup()
tokens
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == " Shubha") %>%
unnest_tokens(tokens, tokens)
dplyr::count(word(), sort = TRUE) %>%
filter(!tokens %in% stop_words$word) %>%
filter(tokens %in% nrc_joy$word)  %>%
ungroup()
tokens
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == " Shubha") %>%
unnest_tokens(tokens, tokens)
dplyr::count(word(), sort = TRUE) %>%
filter(!tokens %in% stop_words$word) %>%
filter(!tokens %in% nrc_joy$word)  %>%
ungroup()
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == " Shubha") %>%
unnest_tokens(tokens, tokens) %>%
dplyr::count(word(), sort = TRUE) %>%
filter(!tokens %in% stop_words$word) %>%
filter(!tokens %in% nrc_joy$word)  %>%
ungroup()
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == " Shubha") %>%
unnest_tokens(tokens, tokens) %>%
dplyr::count(word(), sort = TRUE) #%>%
#filter(!tokens %in% stop_words$word) %>%
#filter(!tokens %in% nrc_joy$word)  %>%
#ungroup()
tokens
View(tokens)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tokens <- df %>%
filter(name == " Shubha") %>%
unnest_tokens(tokens, tokens) %>%
dplyr::count(word(), sort = TRUE) %>%
filter(!tokens %in% stop_words$word) #%>%
#filter(!tokens %in% nrc_joy$word)  %>%
#ungroup()
tokens
View(tokens)
# Combine the selected variables into a new data frame
renderPlot({
tokens <- df %>%
filter(name == input$sender) %>%
select(tokens) %>%
unnest_tokens(tokens, tokens) %>%
dplyr::count(tokens, sort = TRUE) %>%
filter(!tokens %in% stop_words$word) %>%
ungroup() %>%
with(wordcloud(tokens, n, random.order = FALSE, colors = pal))
})
rm(list = ls())
pwd
getwd()
y <- read.table(file = 'final_y.txt',sep = "")
x1 <- read.table(file = 'final_x1.txt',sep = "")
x2 <- read.table(file = 'final_x2.txt',sep = "")
preds <- read.table(file = 'final_preds.txt',sep = "")
df <- cbind(x1,x2,preds,y)
colnames(df) <- c('x1','x2','preds','y')
df <- df %>% mutate(correct = if_else(y == preds, 0, 1))
library(ggplot2)
library(dplyr)
library(flexdashboard)
library(gridExtra)
library(plotly)
library(shiny)
library(rsconnect)
library(ggpubr)
# define function to load data in an appropriate format
load_data <- function(xfile, yfile){
X <- read.csv(xfile)
y <- read.csv(yfile)
df <- as.data.frame(X$X0)
colnames(df) <- c('x1')
df$x2 <- X$X1
df$y <- y$X0
return(df)
}
# define function to plot data
plot_basic <- function(df,title){
g <- ggplot(df, aes(x = x1, y = x2, color = y)) +
ggtitle(title) +
geom_point(show.legend = FALSE) +
xlim(-5,5) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
return(g)
}
plot_jitter <- function(df,title){
g <- ggplot(df, aes(x = x1, y = x2, color = y)) +
ggtitle(title) +
xlim(-5,5) +
geom_point(show.legend = FALSE) +
geom_jitter(width = 0.1, height = 0.1, show.legend = FALSE) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
return(g)
}
plot_polygon <- function(df, title){
ggplot(df, aes(x = x1, y = x2, color = y)) +
geom_point(show.legend = FALSE)+
stat_chull( data = negatives, mapping = aes(x = x1, y = x2), alpha = 0.2, geom = "polygon", linetype = 0, show.legend = FALSE)+
ggtitle(title) +
geom_point(show.legend = FALSE) +
xlim(-5,5) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
}
plot_tomek <- function(df, highlight,title){
g <- ggplot(df, aes(x = x1, y = x2, color = y)) +
geom_point(show.legend = FALSE)+
ggtitle(title) +
geom_point(show.legend = FALSE) +
xlim(-5,5) +
geom_text(data=highlight, label="Tomek Link", vjust=-1, hjust = 0.2, show.legend = FALSE)+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
return(g)
}
# load datasets
df <- load_data('X.csv','y.csv')
smote <- load_data('smote.csv', 'smote_y.csv')
tomek <- load_data('tomek.csv','tomek_y.csv')
# separate positives and negatives
positives <- df %>% filter(y == 1)
negatives <- df %>% filter(y == 0)
# create random undersampled and oversampled datasets
random_oversampled <- rbind(positives, sample_n(negatives, 180, replace = TRUE))
# identify tomek links by hand
link1 <- negatives %>% filter(x1 > -3.028886 & x2 > -0.38917162)
link2 <- df %>% filter(x1 > -2.089825) %>% filter(y == 0)
link3 <- negatives %>% filter(x2 < -1.9)
highlight <- rbind(link2, link1[c(2), ],link3[c(2), ])
renderPlotly({
plot_basic(df, 'Original Imbalanced Data')
})
resampled_positives <- sample_n(positives, 20, replace = TRUE)
random_undersampling <- rbind(resampled_positives, negatives)
renderPlot({
input$ref
grid.arrange(plot_basic(df,
'Original Imbalanced Data'),
plot_basic(rbind(sample_n(positives, 20, replace = TRUE), negatives),
'Random Undersampling'), ncol=2)})
actionButton("ref", label = "Refresh", style='padding:4px; font-size:80%', class = "btn btn-lg btn-primary",
onclick ="location.href='#section-frame3';")
renderPlot({
if(input$jitter  == TRUE){
grid.arrange(plot_basic(df, 'Original Imbalanced Data'), plot_jitter(random_oversampled, 'Random Oversampling'), ncol=2)
}
else{
grid.arrange(plot_basic(df, 'Original Imbalanced Data'), plot_basic(random_oversampled, 'Random Oversampling'), ncol=2)
}
})
actionButton("jitter", label = "Jitter", style='padding:4px; font-size:80%', class = "btn btn-lg btn-primary",
onclick ="location.href='#section-frame3';")
renderPlot({
grid.arrange(plot_polygon(df, 'Original Imbalanced Data'), plot_polygon(smote, 'SMOTE: Synthetic Minority Oversampling'), ncol=2)
})
renderPlot({
p1<- plot_tomek(df, highlight, 'Original Imbalanced Data')
p2 <-  plot_tomek(tomek, highlight,'Removing Tomek Links')
grid.arrange(p1,p2, ncol=2)
})
library(dplyr)
library(ggplot2)
library(tweenr)
library(gganimate)
one_frame <- function(i){
y <- read.table(file = paste('data',i,'y.txt',sep = ""))
x1 <- read.table(file = paste('data',i,'x1.txt',sep = ""))
x2 <- read.table(file = paste('data',i,'x2.txt',sep = ""))
preds <- read.table(file = paste('data',i,'p.txt',sep = ""))
df <- cbind(x1,x2,preds,y)
colnames(df) <- c('x1','x2','preds','y')
df <- df %>% mutate(correct = if_else(y == preds, 0, 1))
df$frame <- i
#print(1-mean(df$correct))
return(df)
}
df <- one_frame(1)
for (i in 2:50){
to_add <- one_frame(i)
df <- rbind(df,to_add)
}
plot_one <- function(df){
p <- ggplot(df, aes(x1, x2, size = correct, color = preds)) +
geom_point(show.legend = F)
return(p)}
p <- ggplot(df, aes(x1, x2, size = correct, color = preds, frame = frame)) +
geom_point(show.legend = F) +
ggtitle(label = paste('Accuracy: ', round(1-mean(df$correct),3)))
library(gganimate)
#gganimate(p, interval = 0.5)
#plotOutput({
#gganimate(p, interval = 0.5)
#
#
#  })
y <- read.table(file = 'final_y.txt',sep = "")
x1 <- read.table(file = 'final_x1.txt',sep = "")
x2 <- read.table(file = 'final_x2.txt',sep = "")
preds <- read.table(file = 'final_preds.txt',sep = "")
df <- cbind(x1,x2,preds,y)
colnames(df) <- c('x1','x2','preds','y')
df <- df %>% mutate(correct = if_else(y == preds, 0, 1))
y <- read.table(file = 'final_y.txt',sep = "")
x1 <- read.table(file = 'final_x1.txt',sep = "")
x2 <- read.table(file = 'final_x2.txt',sep = "")
preds <- read.table(file = 'final_preds.txt',sep = "")
final <- cbind(x1,x2,preds,y)
colnames(final) <- c('x1','x2','preds','y')
final <- final %>% mutate(correct = if_else(y == preds, 0, 1))
getwd()
y <- read.table(file = 'final_y.txt',sep = "")
x1 <- read.table(file = 'final_x1.txt',sep = "")
x2 <- read.table(file = 'final_x2.txt',sep = "")
preds <- read.table(file = 'final_preds.txt',sep = "")
final <- cbind(x1,x2,preds,y)
colnames(final) <- c('x1','x2','preds','y')
final <- final %>% mutate(correct = if_else(y == preds, 0, 1))
setwd("~/Desktop/data-viz/fp-sush")
getwd()
y <- read.table(file = 'final_y.txt',sep = "")
x1 <- read.table(file = 'final_x1.txt',sep = "")
x2 <- read.table(file = 'final_x2.txt',sep = "")
preds <- read.table(file = 'final_preds.txt',sep = "")
final <- cbind(x1,x2,preds,y)
colnames(final) <- c('x1','x2','preds','y')
final <- final %>% mutate(correct = if_else(y == preds, 0, 1))
getwd()
y <- read.table(file = 'final_y.txt',sep = "")
x1 <- read.table(file = 'final_x1.txt',sep = "")
x2 <- read.table(file = 'final_x2.txt',sep = "")
preds <- read.table(file = 'final_preds.txt',sep = "")
final <- cbind(x1,x2,preds,y)
colnames(final) <- c('x1','x2','preds','y')
final <- final %>% mutate(correct = if_else(y == preds, 0, 1))
getwd()
y <- read.table(file = 'final_y.txt',sep = "")
x1 <- read.table(file = 'final_x1.txt',sep = "")
x2 <- read.table(file = 'final_x2.txt',sep = "")
preds <- read.table(file = 'final_preds.txt',sep = "")
final <- cbind(x1,x2,preds,y)
colnames(final) <- c('x1','x2','preds','y')
final <- final %>% mutate(correct = if_else(y == preds, 0, 1))
getwd()
y <- read.table(file = 'final_y.txt',sep = "")
x1 <- read.table(file = 'final_x1.txt',sep = "")
x2 <- read.table(file = 'final_x2.txt',sep = "")
preds <- read.table(file = 'final_preds.txt',sep = "")
final <- cbind(x1,x2,preds,y)
colnames(final) <- c('x1','x2','preds','y')
final <- final %>% mutate(correct = if_else(y == preds, 0, 1))
plot_one(final)
y <- read.table(file = 'final_y.txt',sep = "")
x1 <- read.table(file = 'final_x1.txt',sep = "")
x2 <- read.table(file = 'final_x2.txt',sep = "")
preds <- read.table(file = 'final_preds.txt',sep = "")
final <- cbind(x1,x2,preds,y)
colnames(final) <- c('x1','x2','preds','y')
final <- final %>% mutate(correct = if_else(y == preds, 0, 1))
plot_one(final) +
ggtitle('Accuracy = 0.92')
